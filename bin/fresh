#!/bin/bash
# shellcheck disable=SC2016 # Not stressed about single quote usage

source_utils() {
  util_source="${HOME}/.fresh/bin/utils"
  if [ ! -f "${util_source}" ]; then
    # shellcheck source=/dev/null
    source /dev/stdin <<< "$(curl --insecure --location --silent https://github.com/d3v1an7/macos-fresh/raw/master/bin/utils)"
  else
    # shellcheck source=/dev/null
    source "${util_source}"
  fi
}

create_config_files() {
  utils_print_heading "Creating config files"
  create_brewfile
  create_mackupcfg
}

create_brewfile() {
  local file="${dir:?}/Brewfile"
  utils_run_yq '.brew | to_entries[] |
  if .key == "mas" then
    (.value[]) as $item | "\(.key) \"\($item.name)\", id: \($item.id)"
  else
    "\(.key) \"\(.value[])\""
  end' > "${file}"
  utils_print_status "pass" "${file}"
}

create_mackupcfg() {
  local file="${HOME}/.mackup.cfg"
  utils_run_yq '.mackup | to_entries[] |
    if .key == "storage" then
      (.value | to_entries[]) as $item | "[\(.key)]","\($item.key)=\($item.value)"
    else
      "[\(.key)]","\(.value[])"
    end' > "${file}"
  utils_print_status "pass" "${file}"
}

run_brew_bundle_install() {
  local title="brew bundle install"
  utils_print_heading "Run ${title}"
  brew bundle install --file="${dir}/Brewfile" --verbose
  echo
  utils_print_status "pass" "${title}"
}

open_dropbox() {
  local title="Dropbox setup"
  utils_print_heading "Run ${title}"
  open -a "Dropbox"
  echo "Dropbox will open shortly, please complete the setup and first sync before proceeding."
  echo
  read -r -n 1 -s -p "When Dropbox has finished syncing, press any key to continue..."
  echo
  utils_print_status "pass" "${title}"
}

run_mackup_restore() {
  local title="brew mackup restore"
  utils_print_heading "Run ${title}"
  mackup restore
  utils_print_status "pass" "${title}"
}

system_defaults() {
  local title="System defaults (plutil)"
  utils_print_heading "${title}"
  while read -r item; do
    utils_defaults_update
  done <<< "$(utils_run_yq '.system.defaults
    | to_entries[]
    | .value[] as $item
    | "\(.key)|\($item.key)|\($item.type)|\($item.value)"')"
}

system_security() {
  local title="Security"
  utils_print_heading "${title}"
  if utils_check_if_true ".system.security.disable_gatekeeper"; then
    sudo spctl --master-disable
    utils_print_status "pass" "Disable Gatekeeper"
  fi
}

system_labels() {
  local title="Labels"
  utils_print_heading "${title}"
  while read -r item; do
    IFS='|' read -r -a array <<< "$item"
    item_key="${array[0]}"
    item_value="${array[1]}"
    item_value="${item_value/USER/$USER}"
    utils_simple_update \
      "${item_key}" \
      "scutil --get ${item_key}" \
      "sudo scutil --set ${item_key} ${item_value}"
  done <<< "$(utils_run_yq '.system.labels.computer_names[] | "\(.key)|\(.value)"')"
}

system_power() {
  title="Power settings"
  # Can't inspect individual settings, so just send all settings to logs
  pmset -g custom | utils_log_output &> /dev/null
  utils_simple_loop \
    "${title} (All)" \
    "sudo pmset -a" \
  <<< "$(utils_run_yq '.system.power.power_settings_all[] | "\(.key)|\(.value)"')"
  utils_simple_loop \
    "${title} (Battery)" \
    "sudo pmset -a" \
  <<< "$(utils_run_yq '.system.power.power_settings_battery[] | "\(.key)|\(.value)"')"
  utils_simple_loop \
    "${title} (Charger)" \
    "sudo pmset -a" \
  <<< "$(utils_run_yq '.system.power.power_settings_charger[] | "\(.key)|\(.value)"')"
}

misc_font() {
  local title="System font"
  utils_print_heading "Install ${title}"
  while read -r item; do
    IFS='|' read -r -a array <<< "$item"
    font_name="${array[0]}"
    font_download="${array[1]}"
    font_path="${array[2]}"
  done <<< "$(utils_run_yq '.misc.font | "\(.name)|\(.download)|\(.path)"')"
  if [ ! -f "${HOME}/Library/Fonts/${font_name}" ]; then
    curl --location --silent --output /tmp/font.zip "${font_download}"
    unzip -q -o /tmp/font.zip -d /tmp
    cp -R "/tmp/${font_path}/." "${HOME}/Library/Fonts"
  fi
  utils_print_status "pass" "${title} installed"
}

misc_screensaver() {
  local title="Screensaver"
  utils_print_heading "Set ${title}"
  while read -r item; do
    utils_defaults_update
  done <<< "$(utils_run_yq '.misc.screensaver.defaults
    | to_entries[]
    | .value[] as $item
    | "\(.key)|\($item.key)|\($item.type)|\($item.value)"')"
}

apps_brave() {
  local title="Brave Browser"
  utils_print_heading "Setup ${title}"
  if utils_check_if_true ".apps.brave.set_as_default"; then
    open --new -a "Brave Browser" --args --make-default-browser
    utils_print_status "pass" "Set Brave Browser as default"
  fi
  echo
  while read -r item; do
    utils_defaults_update
  done <<< "$(utils_run_yq '.apps.brave.defaults
    | to_entries[]
    | .value[] as $item
    | "\(.key)|\($item.key)|\($item.type)|\($item.value)"')"
}

apps_iterm2() {
  local title="iTerm2"
  utils_print_heading "Setup ${title}"
  if utils_check_if_true ".apps.iterm2.import_style"; then
    if [ ! -f "${HOME}/Library/Preferences/com.googlecode.iTerm2.plist" ]; then
      open -a iTerm && sleep 2 && killall iTerm2
    fi
    style_src="${dir}/misc/iTerm2/style.json"
    style_dest="${HOME}/Library/Application Support/iTerm2/DynamicProfiles"
    if [ ! -f "${style_dest}/style.json" ]; then
      mkdir -p "${style_dest}"
      cp "${style_src}" "${style_dest}/style.json"
    fi
    utils_print_status "pass" "Import style"
    item="com.googlecode.iterm2|Default Bookmark Guid|string|ba19744f-6af3-434d-aaa6-0a48e0969958"
    utils_defaults_update
  fi
  echo
  if utils_check_if_true ".apps.iterm2.shell_integration"; then
    curl --location --silent https://iterm2.com/misc/install_shell_integration.sh | bash
    echo
    utils_print_status "pass" "Shell integration"
  fi
  echo
  while read -r item; do
    utils_defaults_update
  done <<< "$(utils_run_yq '.apps.iterm2.defaults
    | to_entries[]
    | .value[] as $item
    | "\(.key)|\($item.key)|\($item.type)|\($item.value)"')"
}

clear_preference_cache() {
  thing="Clear preference cache"
  utils_print_heading "${thing}"
  array=(
    Finder
    Dock
    SystemUIServer
    cfprefsd
  )
  for item in "${array[@]}"; do
    killall "${item}"
  done
  utils_print_status "pass" "${thing}"
}

see_you_space_cowboy(){
  utils_print_heading "Fresh complete!"
  echo "Note that some of these changes require a logout/restart to take effect."
  echo
  say --voice=fred --rate=250 "See you, Space Cowboy"
}

print_manual_steps() {
  local title="Manual steps"
  utils_print_heading "${title}"
  echo "Some applescripts will error when running the first time, as"
  echo "Terminal/iTerm needs to be granted access to accessibility features."
  echo
  echo "Add Terminal/iTerm to:"
  echo "System Preferences > Security & Privacy > Privacy > Accessibility"
  echo "and run the applescript again."
  echo
  echo "Run: osascript ${dir}/misc/displaysettings.applescript"
  echo
}

main() {
  source_utils
  utils_sudo_keep_alive
  create_config_files
  run_brew_bundle_install
  open_dropbox
  run_mackup_restore
  system_defaults
  system_security
  system_labels
  system_power
  misc_font
  misc_screensaver
  apps_brave
  apps_iterm2
  clear_preference_cache
  see_you_space_cowboy
  print_manual_steps
}

main
